1) Прочитать файл с листингом

2) Если задана опция --code-tag - вырезаем фрагмент с этим тэгом
   должна быть задана также опция --cut-prefix

3) --listing-nested-tags-mode - keep/remove/empty-line

4) В результирующем файле может быть заголовок, и текст.
   Если не задана опция --listing-tr-base-id - то используем то, что в --code-tag
   если в итоге у нас пустая строка - то никаких текстов не добавляем.
   
   Для получения заголовка используем listing-tr-base-id-title, для текста listing-tr-base-id-text

   Категория - _md-listings

5) Свободный аргумент (не опция)
   в режиме tr  - имя файла трансляции
   в режиме md  - корень для генерируемых файлов
   в режиме lst - корень для генерируемых файлов, --output-file - имя файла относительно заданного корня
       --listing-code-file - файл с кодом, откуда выцепляем сорц для листинга
   в режиме article - корень для генерируемых файлов, --output-file - имя файла относительно заданного корня
     --template-file - задаём файл шаблона. Если --output-file не задан, то используем --template-file (но относительно заданного корня)
     Если имя целевого файла автоматически генерируется из --template-file, то заменяем расширение на целевое -
     можно задать опцией --target-ext, по умолчанию - .md

5) Можно обрабатывать шаблоны. Шаблон - это обычный markdown, но там есть спец тэги.
   Какие?
   Напимер:

     ![путь/имя_файла] - вставляем файл целиком как листинг
     ![путь/имя_файла#метка] - вставляем фрагмент файла
       Имя файла - относительно текущего обрабатываемого шаблона

     ?[Имя_типа] - ссылка на тип

     Или использовать фигурные скобки? !{}, ?{}


   При обработке шаблона нам не нужны файлы переводов - это законченные статьи уже на целевом языке